-- TABLA ESTADO
CREATE TABLE FIDE_ESTADO_TB (
  ID_ESTADO NUMBER NOT NULL,
  NOMBRE VARCHAR2(50) NOT NULL CHECK (NOMBRE IN ('ACTIVO', 'INACTIVO')),
  CONSTRAINT est_pk primary key (ID_ESTADO) using index(create index FIDE_ESTADO_TB_id_estado_IDX ON FIDE_ESTADO_TB (ID_ESTADO))
);
/

-- TABLA GENERO
CREATE TABLE FIDE_GENERO_TB (
  ID_GENERO NUMBER,
  NOMBRE VARCHAR2(50) NOT NULL,
  DESCRIPCION VARCHAR2(255),
  CONSTRAINT gen_pk primary key (ID_GENERO) using index(create index FIDE_GENERO_TB_id_genero_IDX ON FIDE_GENERO_TB (ID_GENERO))
);
/

-- TABLA DIRECTOR
CREATE TABLE FIDE_DIRECTOR_TB (
  ID_DIRECTOR NUMBER NOT NULL,
  NOMBRE VARCHAR2(50) NOT NULL,
  NACIONALIDAD VARCHAR2(50),
  CONSTRAINT dir_pk primary key (ID_DIRECTOR) using index(create index FIDE_DIRECTOR_TB_id_director_IDX ON FIDE_DIRECTOR_TB (ID_DIRECTOR))
);
/

-- TABLA IDIOMAS
CREATE TABLE FIDE_IDIOMAS_TB (
  ID_IDIOMAS NUMBER NOT NULL,
  NOMBRE VARCHAR2(50) NOT NULL,
  DESCRIPCION VARCHAR2(255),
  CONSTRAINT ido_pk primary key (ID_IDIOMAS) using index(create index FIDE_IDIOMAS_TB_id_idiomas_IDX ON FIDE_IDIOMAS_TB (ID_IDIOMAS))
);
/

-- TABLA TIPO DE SALA
CREATE TABLE FIDE_TIPO_SALA_TB (
  ID_TIPO_SALA NUMBER,
  NOMBRE VARCHAR2(50) NOT NULL,
  DESCRIPCION VARCHAR2(255),
  CONSTRAINT tip_sal_pk primary key (ID_TIPO_SALA) using index(create index FIDE_TIPO_SALA_TB_id_tipo_sala_IDX ON FIDE_TIPO_SALA_TB (ID_TIPO_SALA))
);
/

-- TABLA POSICION
CREATE TABLE FIDE_POSICION_TB (
    ID_POSICION NUMBER,
    NOMBRE VARCHAR2(50),
    DESCRIPCION VARCHAR2(255),
    CONSTRAINT pos_pk primary key (ID_POSICION) using index(create index FIDE_POSICION_TB_id_posicion_IDX ON FIDE_POSICION_TB (ID_POSICION))
);
/

-- TABLA DE PROVEEDORES
CREATE TABLE FIDE_PROVEEDORES_TB (
  ID_PROVEEDOR NUMBER NOT NULL,
  NOMBRE VARCHAR2(100) NOT NULL,
  CONTACTO VARCHAR2(50),
  TELEFONO VARCHAR2(20),
  CONSTRAINT prov_pk primary key (ID_PROVEEDOR) using index(create index FIDE_PROVEEDORES_TB_id_proveedor_IDX ON FIDE_PROVEEDORES_TB (ID_PROVEEDOR))
);
/

-- TABLA DE INVENTARIO
CREATE TABLE FIDE_INVENTARIO_TB (
  ID_INVENTARIO NUMBER,
  NOMBRE VARCHAR2(100) NOT NULL,
  DESCRIPCION VARCHAR2(255),
  CANTIDAD NUMBER NOT NULL,
  ID_PROVEEDOR NUMBER NOT NULL,
  FOREIGN KEY (ID_PROVEEDOR) REFERENCES FIDE_PROVEEDORES_TB(ID_PROVEEDOR),
CONSTRAINT inv_pk primary key (ID_INVENTARIO) using index(create index FIDE_INVENTARIO_TB_id_inventario_IDX ON FIDE_INVENTARIO_TB (ID_INVENTARIO))
);
/

-- TABLA DE CLIENTES
CREATE TABLE FIDE_CLIENTES_TB (
  ID_CLIENTE NUMBER NOT NULL,
  NOMBRE VARCHAR2(50) NOT NULL,
  APELLIDO VARCHAR2(50) NOT NULL,
  CORREO_ELECTRONICO VARCHAR2(100) NOT NULL UNIQUE,
CONSTRAINT cli_pk primary key (ID_CLIENTE) using index(create index FIDE_CLIENTES_TB_id_clientes_IDX ON FIDE_CLIENTES_TB (ID_CLIENTE))
);
/

-- TABLA DE EMPLEADOS
CREATE TABLE FIDE_EMPLEADOS_TB (
  ID_EMPLEADO NUMBER NOT NULL,
  NOMBRE VARCHAR2(50) NOT NULL,
  APELLIDO VARCHAR2(50) NOT NULL,
  CORREO_ELECTRONICO VARCHAR2(100) NOT NULL UNIQUE,
  TELEFONO VARCHAR2(20),
  ID_POSICION NUMBER,    
  FOREIGN KEY (ID_POSICION) REFERENCES FIDE_POSICION_TB(ID_POSICION),
  CONSTRAINT emp_pk primary key (ID_EMPLEADO) using index(create index FIDE_EMPLEADOS_TB_id_empleado_IDX ON FIDE_EMPLEADOS_TB (ID_EMPLEADO))
);
/
ALTER TABLE FIDE_EMPLEADOS_TB ADD CONTRASENA VARCHAR2(255);
/

-- TABLA DE PELICULAS
CREATE TABLE FIDE_PELICULAS_TB (
  ID_PELICULA NUMBER NOT NULL,
  NOMBRE VARCHAR2(100) NOT NULL,
  ID_GENERO NUMBER NOT NULL,
  ID_DIRECTOR NUMBER NOT NULL,
  DESCRIPCION VARCHAR2(200) NOT NULL,
  ID_IDIOMAS NUMBER NOT NULL,
  ID_ESTADO NUMBER NOT NULL,
  FOREIGN KEY (ID_GENERO) REFERENCES FIDE_GENERO_TB(ID_GENERO),
  FOREIGN KEY (ID_DIRECTOR) REFERENCES FIDE_DIRECTOR_TB(ID_DIRECTOR),
  FOREIGN KEY (ID_IDIOMAS) REFERENCES FIDE_IDIOMAS_TB(ID_IDIOMAS),
  FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO),
  CONSTRAINT peli_pk primary key (ID_PELICULA) using index(create index FIDE_PELICULAS_TB_id_pelicula_IDX ON FIDE_PELICULAS_TB (ID_PELICULA))
);
/

-- TABLA DE SALAS
CREATE TABLE FIDE_SALAS_TB (
  ID_SALA NUMBER NOT NULL,
  NOMBRE VARCHAR2(50) NOT NULL,
  NUMERO_ASIENTOS NUMBER NOT NULL,
  ID_TIPO_SALA NUMBER NOT NULL,
  ID_ESTADO NUMBER NOT NULL,
  FOREIGN KEY (ID_TIPO_SALA) REFERENCES FIDE_TIPO_SALA_TB(ID_TIPO_SALA),
  FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO),
CONSTRAINT sal_pk primary key (ID_SALA) using index(create index FIDE_SALAS_TB_id_salas_IDX ON FIDE_SALAS_TB (ID_SALA))
);
/

-- TABLA DE FUNCIONES
CREATE TABLE FIDE_FUNCION_TB (
  ID_FUNCION NUMBER(10) NOT NULL,
  FECHA DATE NOT NULL,
  ID_PELICULA NUMBER(10) NOT NULL,
  ID_SALA NUMBER(10) NOT NULL,  
  CONSTRAINT FK_FUNCION_PELICULA FOREIGN KEY (ID_PELICULA) REFERENCES FIDE_PELICULAS_TB(ID_PELICULA),
  CONSTRAINT FK_FUNCION_SALA FOREIGN KEY (ID_SALA) REFERENCES FIDE_SALAS_TB(ID_SALA),
  CONSTRAINT fun_pk primary key (ID_FUNCION) using index(create index FIDE_FUNCION_TB_id_funcion_IDX ON FIDE_FUNCION_TB (ID_FUNCION))
);
/

-- TABLA DE RESERVAS
CREATE TABLE FIDE_RESERVAS_TB (
  ID_RESERVA NUMBER NOT NULL,
  ID_CLIENTE NUMBER NOT NULL,
  ID_FUNCION NUMBER NOT NULL,
  FECHA_RESERVA DATE NOT NULL,
  CANTIDAD_ASIENTOS NUMBER NOT NULL,
  FOREIGN KEY (ID_CLIENTE) REFERENCES FIDE_CLIENTES_TB(ID_CLIENTE),
  FOREIGN KEY (ID_FUNCION) REFERENCES FIDE_FUNCION_TB(ID_FUNCION),
  CONSTRAINT res_pk primary key (ID_RESERVA) using index(create index FIDE_RESERVAS_TB_id_reserva_IDX ON FIDE_RESERVAS_TB (ID_RESERVA))
);
/

-- TABLA DE COMIDA
CREATE TABLE FIDE_COMIDA_TB (
  ID_COMIDA NUMBER NOT NULL,
  ID_INVENTARIO NUMBER,
  PRECIO NUMBER(5,2) NOT NULL,
  FOREIGN KEY (ID_INVENTARIO) REFERENCES FIDE_INVENTARIO_TB(ID_INVENTARIO),
  CONSTRAINT com_pk primary key (ID_COMIDA) using index(create index FIDE_COMIDA_TB_id_comida_IDX ON FIDE_COMIDA_TB (ID_COMIDA))
);
/

-- TABLA DE FACTURA
CREATE TABLE FIDE_FACTURA_TB (
  ID_FACTURA NUMBER NOT NULL,
  FECHA_FACTURA DATE NOT NULL,
  ID_CLIENTE NUMBER NOT NULL,
  ID_FUNCION NUMBER(10) NOT NULL, 
  ID_EMPLEADO NUMBER(10) NOT NULL,  
  TOTAL NUMBER(10,2) NOT NULL,  
  FOREIGN KEY (ID_CLIENTE) REFERENCES FIDE_CLIENTES_TB(ID_CLIENTE),
  FOREIGN KEY (ID_FUNCION) REFERENCES FIDE_FUNCION_TB(ID_FUNCION),
  FOREIGN KEY (ID_EMPLEADO) REFERENCES FIDE_EMPLEADOS_TB(ID_EMPLEADO),
  CONSTRAINT fac_pk primary key (ID_FACTURA) using index(create index FIDE_FACTURA_TB_id_factura_IDX ON FIDE_FACTURA_TB (ID_FACTURA))
);
/

-- TABLA FACTURA COMIDA
CREATE TABLE FIDE_FACTURA_COMIDA_TB (
    ID_FACTURA_COMIDA NUMBER,
    ID_COMIDA NUMBER,
    ID_CLIENTE NUMBER,
    ID_EMPLEADO NUMBER,
    CANTIDAD NUMBER,
    TOTAL NUMBER(10, 2),
    FOREIGN KEY (ID_COMIDA) REFERENCES FIDE_COMIDA_TB(ID_COMIDA),
    FOREIGN KEY (ID_CLIENTE) REFERENCES FIDE_CLIENTES_TB(ID_CLIENTE),
    FOREIGN KEY (ID_EMPLEADO) REFERENCES FIDE_EMPLEADOS_TB(ID_EMPLEADO),
    CONSTRAINT fac_com_pk primary key (ID_FACTURA_COMIDA) using index(create index FIDE_FACTURA_COMIDA_TB_id_factura_comida_IDX ON FIDE_FACTURA_COMIDA_TB (ID_FACTURA_COMIDA))
);
/

-- TABLA METODO DE PAGO
CREATE TABLE FIDE_METODO_PAGO_TB (
  ID_METODO_PAGO NUMBER,
  NOMBRE VARCHAR2(50) NOT NULL,
  DESCRIPCION VARCHAR2(255),
  ID_ESTADO NUMBER NOT NULL,
  FOREIGN KEY (ID_ESTADO) REFERENCES FIDE_ESTADO_TB(ID_ESTADO),
  CONSTRAINT met_pag_pk primary key (ID_METODO_PAGO) using index(create index FIDE_METODO_PAGO_TB_id_metodo_pago_IDX ON FIDE_METODO_PAGO_TB (ID_METODO_PAGO))
);
/

-- TABLA PAGOS
CREATE TABLE FIDE_PAGOS_TB (
    ID_PAGO NUMBER,
    ID_FACTURA NUMBER,
    ID_FACTURA_COMIDA NUMBER,
    FECHA_PAGO DATE,
    MONTO NUMBER,
    ID_METODO_PAGO NUMBER,
    FOREIGN KEY (ID_FACTURA) REFERENCES FIDE_FACTURA_TB (ID_FACTURA),
    FOREIGN KEY (ID_FACTURA_COMIDA) REFERENCES FIDE_FACTURA_COMIDA_TB (ID_FACTURA_COMIDA),
    FOREIGN KEY (ID_METODO_PAGO) REFERENCES FIDE_METODO_PAGO_TB (ID_METODO_PAGO),
    CONSTRAINT pag_pk primary key (ID_PAGO) using index (CREATE INDEX FIDE_PAGOS_TB_id_pago_IDX ON FIDE_PAGOS_TB (ID_PAGO))
);

/


------------------------------------------------------------------------------------------------------
------INSERTS-------------
-- Insertar en tabla FIDE_ESTADO_TB
INSERT INTO FIDE_ESTADO_TB (ID_ESTADO, NOMBRE) VALUES (1, 'ACTIVO');
INSERT INTO FIDE_ESTADO_TB (ID_ESTADO, NOMBRE) VALUES (2, 'INACTIVO');

-- Insertar en tabla FIDE_GENERO_TB
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (1, 'Acción', 'Películas de acción');
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (2, 'Comedia', 'Películas de comedia');
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (3, 'Drama', 'Películas de drama');
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (4, 'Horror', 'Películas de horror');
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (5, 'Ciencia Ficción', 'Películas de ciencia ficción');
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (6, 'Fantasía', 'Películas de fantasía');
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (7, 'Romance', 'Películas de romance');
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (8, 'Aventura', 'Películas de aventura');
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (9, 'Animación', 'Películas de animación');
INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (10, 'Documental', 'Películas documentales');

-- Insertar en tabla FIDE_DIRECTOR_TB
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (1, 'Steven Spielberg', 'USA');
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (2, 'Christopher Nolan', 'UK');
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (3, 'Martin Scorsese', 'USA');
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (4, 'Quentin Tarantino', 'USA');
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (5, 'Alfonso Cuarón', 'Mexico');
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (6, 'Pedro Almodóvar', 'Spain');
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (7, 'James Cameron', 'Canada');
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (8, 'Ridley Scott', 'UK');
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (9, 'Guillermo del Toro', 'Mexico');
INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (10, 'Francis Ford Coppola', 'USA');

-- Insertar en tabla FIDE_IDIOMAS_TB
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (1, 'Inglés', 'Idioma inglés');
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (2, 'Español', 'Idioma español');
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (3, 'Francés', 'Idioma francés');
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (4, 'Alemán', 'Idioma alemán');
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (5, 'Italiano', 'Idioma italiano');
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (6, 'Portugués', 'Idioma portugués');
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (7, 'Japonés', 'Idioma japonés');
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (8, 'Chino', 'Idioma chino');
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (9, 'Ruso', 'Idioma ruso');
INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (10, 'Árabe', 'Idioma árabe');

-- Insertar en tabla FIDE_TIPO_SALA_TB
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (1, 'Estándar', 'Sala estándar');
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (2, 'IMAX', 'Sala IMAX');
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (3, '3D', 'Sala 3D');
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (4, 'VIP', 'Sala VIP');
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (5, '4DX', 'Sala 4DX');
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (6, 'D-Box', 'Sala D-Box');
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (7, 'ScreenX', 'Sala ScreenX');
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (8, 'Premium', 'Sala Premium');
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (9, 'Dolby Atmos', 'Sala Dolby Atmos');
INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (10, 'Cine en casa', 'Sala de cine en casa');

-- Insertar en tabla FIDE_POSICION_TB
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (1, 'Gerente', 'Gerente de cine');
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (2, 'Asistente', 'Asistente de gerente');
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (3, 'Cajero', 'Cajero de cine');
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (4, 'Vendedor', 'Vendedor de entradas');
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (5, 'Supervisor', 'Supervisor de personal');
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (6, 'Proyeccionista', 'Operador de proyección');
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (7, 'Limpieza', 'Personal de limpieza');
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (8, 'Seguridad', 'Personal de seguridad');
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (9, 'Técnico', 'Técnico de mantenimiento');
INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION) VALUES (10, 'Administrador', 'Administrador de cine');

-- Insertar en tabla FIDE_PROVEEDORES_TB
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (1, 'Distribuidora XYZ', 'Juan Pérez', '555-1234');
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (2, 'Cinefoods', 'Ana Gómez', '555-5678');
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (3, 'TecnoCine', 'Carlos López', '555-8765');
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (4, 'Películas y más', 'Laura Martínez', '555-4321');
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (5, 'CineTech', 'Mario Rodríguez', '555-6789');
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (6, 'SnacksCine', 'Lucía Fernández', '555-7890');
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (7, 'SoundCine', 'Luis García', '555-0987');
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (8, 'VisualTech', 'Elena Sánchez', '555-6543');
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (9, 'CineEquip', 'Miguel Torres', '555-3210');
INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO) VALUES (10, 'CineSupp', 'Raquel González', '555-8760');

-- Insertar en tabla FIDE_INVENTARIO_TB
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (1, 'Palomitas', 'Bolsa de palomitas de maíz', 100, 1);
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (2, 'Refrescos', 'Lata de refresco', 200, 2);
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (3, 'Nachos', 'Paquete de nachos', 150, 3);
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (4, 'Caramelos', 'Bolsa de caramelos', 300, 4);
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (5, 'Chocolates', 'Barra de chocolate', 250, 5);
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (6, 'Helados', 'Vaso de helado', 50, 6);
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (7, 'Hot Dogs', 'Hot dog con pan', 75, 7);
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (8, 'Pizzas', 'Mini pizza', 60, 8);
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (9, 'Sandwiches', 'Sandwich de jamón y queso', 40, 9);
INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR) VALUES (10, 'Agua', 'Botella de agua', 100, 10);

-- Insertar en tabla FIDE_CLIENTES_TB
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (1, 'Juan', 'Pérez', 'juan.perez@example.com');
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (2, 'Ana', 'Gómez', 'ana.gomez@example.com');
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (3, 'Carlos', 'López', 'carlos.lopez@example.com');
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (4, 'Laura', 'Martínez', 'laura.martinez@example.com');
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (5, 'Mario', 'Rodríguez', 'mario.rodriguez@example.com');
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (6, 'Lucía', 'Fernández', 'lucia.fernandez@example.com');
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (7, 'Luis', 'García', 'luis.garcia@example.com');
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (8, 'Elena', 'Sánchez', 'elena.sanchez@example.com');
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (9, 'Miguel', 'Torres', 'miguel.torres@example.com');
INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO) VALUES (10, 'Raquel', 'González', 'raquel.gonzalez@example.com');

-- Insertar en tabla FIDE_EMPLEADOS_TB
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (1, 'Pedro', 'Hernández', 'pedro.hernandez@example.com', '555-1111', 1);
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (2, 'Marta', 'Ruiz', 'marta.ruiz@example.com', '555-2222', 2);
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (3, 'Jorge', 'Vázquez', 'jorge.vazquez@example.com', '555-3333', 3);
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (4, 'Sara', 'Gutiérrez', 'sara.gutierrez@example.com', '555-4444', 4);
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (5, 'David', 'Ramírez', 'david.ramirez@example.com', '555-5555', 5);
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (6, 'Julia', 'Romero', 'julia.romero@example.com', '555-6666', 6);
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (7, 'Alberto', 'Ortega', 'alberto.ortega@example.com', '555-7777', 7);
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (8, 'Pablo', 'Ramos', 'pablo.ramos@example.com', '555-8888', 8);
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (9, 'Irene', 'Castro', 'irene.castro@example.com', '555-9999', 9);
INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION) VALUES (10, 'Tomás', 'Navarro', 'tomas.navarro@example.com', '555-0000', 10);

-- Insertar en tabla FIDE_PELICULAS_TB
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (1, 'La Aventura', 1, 1, 'Una gran aventura en el espacio', 1, 1);
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (2, 'El Misterio', 2, 2, 'Un misterio sin resolver', 2, 1);
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (3, 'La Comedia', 3, 3, 'Risas y diversión aseguradas', 3, 1);
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (4, 'El Drama', 4, 4, 'Una historia conmovedora', 4, 1);
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (5, 'La Acción', 1, 5, 'Acción y adrenalina pura', 1, 1);
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (6, 'El Romance', 2, 1, 'Una historia de amor', 2, 1);
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (7, 'La Ciencia Ficción', 3, 2, 'Viaje al futuro', 3, 1);
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (8, 'El Terror', 4, 3, 'Pesadillas y sustos', 4, 1);
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (9, 'La Fantasía', 1, 4, 'Mundos mágicos', 1, 1);
INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO) VALUES (10, 'El Documental', 2, 5, 'Realidad y conocimiento', 2, 1);

-- Insertar en tabla FIDE_SALAS_TB
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (1, 'Sala 1', 100, 1, 1);
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (2, 'Sala 2', 150, 2, 1);
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (3, 'Sala 3', 200, 1, 1);
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (4, 'Sala 4', 250, 2, 1);
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (5, 'Sala 5', 300, 1, 1);
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (6, 'Sala 6', 350, 2, 1);
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (7, 'Sala 7', 400, 1, 1);
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (8, 'Sala 8', 450, 2, 1);
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (9, 'Sala 9', 500, 1, 1);
INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO) VALUES (10, 'Sala 10', 550, 2, 1);

-- Insertar en tabla FIDE_FUNCION_TB
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (1, TO_DATE('2023-08-01', 'YYYY-MM-DD'), 1, 1);
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (2, TO_DATE('2023-08-02', 'YYYY-MM-DD'), 2, 2);
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (3, TO_DATE('2023-08-03', 'YYYY-MM-DD'), 3, 3);
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (4, TO_DATE('2023-08-04', 'YYYY-MM-DD'), 4, 4);
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (5, TO_DATE('2023-08-05', 'YYYY-MM-DD'), 5, 5);
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (6, TO_DATE('2023-08-06', 'YYYY-MM-DD'), 6, 6);
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (7, TO_DATE('2023-08-07', 'YYYY-MM-DD'), 7, 7);
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (8, TO_DATE('2023-08-08', 'YYYY-MM-DD'), 8, 8);
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (9, TO_DATE('2023-08-09', 'YYYY-MM-DD'), 9, 9);
INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA) VALUES (10, TO_DATE('2023-08-10', 'YYYY-MM-DD'), 10, 10);

-- Insertar en tabla FIDE_RESERVAS_TB
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (1, 1, 1, TO_DATE('2023-08-01', 'YYYY-MM-DD'), 2);
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (2, 2, 2, TO_DATE('2023-08-02', 'YYYY-MM-DD'), 3);
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (3, 3, 3, TO_DATE('2023-08-03', 'YYYY-MM-DD'), 4);
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (4, 4, 4, TO_DATE('2023-08-04', 'YYYY-MM-DD'), 5);
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (5, 5, 5, TO_DATE('2023-08-05', 'YYYY-MM-DD'), 6);
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (6, 6, 6, TO_DATE('2023-08-06', 'YYYY-MM-DD'), 1);
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (7, 7, 7, TO_DATE('2023-08-07', 'YYYY-MM-DD'), 2);
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (8, 8, 8, TO_DATE('2023-08-08', 'YYYY-MM-DD'), 3);
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (9, 9, 9, TO_DATE('2023-08-09', 'YYYY-MM-DD'), 4);
INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS) VALUES (10, 10, 10, TO_DATE('2023-08-10', 'YYYY-MM-DD'), 5);

-------------------------------------------------------------------------------------------------------

-----PROCEDIMIENTOS ALMACENADOS-----

-- PROCEDIMIENTO INSERTAR EMPLEADOS
CREATE OR REPLACE PROCEDURE FIDE_EMPLEADOS_TB_INSERTAR_EMPLEADO_SP (
  P_ID_EMPLEADO NUMBER,
  P_NOMBRE VARCHAR2,
  P_APELLIDO VARCHAR2,
  P_CORREO_ELECTRONICO VARCHAR2,
  P_TELEFONO VARCHAR2,
  P_ID_POSICION NUMBER
) AS
BEGIN
  INSERT INTO FIDE_EMPLEADOS_TB (ID_EMPLEADO, NOMBRE, APELLIDO, CORREO_ELECTRONICO, TELEFONO, ID_POSICION)
  VALUES (P_ID_EMPLEADO, P_NOMBRE, P_APELLIDO, P_CORREO_ELECTRONICO, P_TELEFONO, P_ID_POSICION);
END;
/

-- PROCEDIMIENTO INSERTAR PROVEEDORES
CREATE OR REPLACE PROCEDURE FIDE_PROVEEDORES_TB_INSERTAR_PROVEEDOR_SP (
  P_ID_PROVEEDOR NUMBER,
  P_NOMBRE VARCHAR2,
  P_CONTACTO VARCHAR2,
  P_TELEFONO VARCHAR2
) AS
BEGIN
  INSERT INTO FIDE_PROVEEDORES_TB (ID_PROVEEDOR, NOMBRE, CONTACTO, TELEFONO)
  VALUES (P_ID_PROVEEDOR, P_NOMBRE, P_CONTACTO, P_TELEFONO);
END;
/

-- PROCEDIMIENTO INSERTAR INVENTARIO
CREATE OR REPLACE PROCEDURE FIDE_INVENTARIO_TB_INSERTAR_INVENTARIO_SP (
  P_ID_INVENTARIO NUMBER,
  P_NOMBRE VARCHAR2,
  P_DESCRIPCION VARCHAR2,
  P_CANTIDAD NUMBER,
  P_ID_PROVEEDOR NUMBER
) AS
BEGIN
  INSERT INTO FIDE_INVENTARIO_TB (ID_INVENTARIO, NOMBRE, DESCRIPCION, CANTIDAD, ID_PROVEEDOR)
  VALUES (P_ID_INVENTARIO, P_NOMBRE, P_DESCRIPCION, P_CANTIDAD, P_ID_PROVEEDOR);
END;
/

-- PROCEDIMIENTO INSERTAR RESERVAS
CREATE OR REPLACE PROCEDURE FIDE_RESERVAS_TB_INSERTAR_RESERVAS_SP (
  P_ID_RESERVA NUMBER,
  P_ID_CLIENTE NUMBER,
  P_ID_FUNCION NUMBER,
  P_FECHA_RESERVA DATE,
  P_CANTIDAD_ASIENTOS NUMBER
) AS
BEGIN
  INSERT INTO FIDE_RESERVAS_TB (ID_RESERVA, ID_CLIENTE, ID_FUNCION, FECHA_RESERVA, CANTIDAD_ASIENTOS)
  VALUES (P_ID_RESERVA, P_ID_CLIENTE, P_ID_FUNCION, P_FECHA_RESERVA, P_CANTIDAD_ASIENTOS);
END;
/

-- PROCEDIMIENTO INSERTAR PELICULAS
CREATE OR REPLACE PROCEDURE FIDE_PELICULAS_TB_INSERTAR_PELICULAS_SP (
  P_ID_PELICULA NUMBER,
  P_NOMBRE VARCHAR2,
  P_ID_GENERO NUMBER,
  P_ID_DIRECTOR NUMBER,
  P_DESCRIPCION VARCHAR2,
  P_ID_IDIOMAS NUMBER,
  P_ID_ESTADO NUMBER
) AS
BEGIN
  INSERT INTO FIDE_PELICULAS_TB (ID_PELICULA, NOMBRE, ID_GENERO, ID_DIRECTOR, DESCRIPCION, ID_IDIOMAS, ID_ESTADO)
  VALUES (P_ID_PELICULA, P_NOMBRE, P_ID_GENERO, P_ID_DIRECTOR, P_DESCRIPCION, P_ID_IDIOMAS, P_ID_ESTADO);
END;
/

-- PROCEDIMIENTO INSERTAR SALAS
CREATE OR REPLACE PROCEDURE FIDE_SALAS_TB_INSERTAR_SALAS_SP (
  P_ID_SALA NUMBER,
  P_NOMBRE VARCHAR2,
  P_NUMERO_ASIENTOS NUMBER,
  P_ID_TIPO_SALA NUMBER,
  P_ID_ESTADO NUMBER
) AS
BEGIN
  INSERT INTO FIDE_SALAS_TB (ID_SALA, NOMBRE, NUMERO_ASIENTOS, ID_TIPO_SALA, ID_ESTADO)
  VALUES (P_ID_SALA, P_NOMBRE, P_NUMERO_ASIENTOS, P_ID_TIPO_SALA, P_ID_ESTADO);
END;
/

-- PROCEDIMIENTO INSERTAR CLIENTES
CREATE OR REPLACE PROCEDURE FIDE_CLIENTES_TB_INSERTAR_CLIENTES_SP (
  P_ID_CLIENTE NUMBER,
  P_NOMBRE VARCHAR2,
  P_APELLIDO VARCHAR2,
  P_CORREO_ELECTRONICO VARCHAR2
) AS
BEGIN
  INSERT INTO FIDE_CLIENTES_TB (ID_CLIENTE, NOMBRE, APELLIDO, CORREO_ELECTRONICO)
  VALUES (P_ID_CLIENTE, P_NOMBRE, P_APELLIDO, P_CORREO_ELECTRONICO);
END;
/

-- PROCEDIMIENTO INSERTAR FUNCION
CREATE OR REPLACE PROCEDURE FIDE_FUNCION_TB_INSERTAR_FUNCION_SP (
  P_ID_FUNCION NUMBER,
  P_FECHA DATE,
  P_ID_PELICULA NUMBER,
  P_ID_SALA NUMBER
) AS
BEGIN
  INSERT INTO FIDE_FUNCION_TB (ID_FUNCION, FECHA, ID_PELICULA, ID_SALA)
  VALUES (P_ID_FUNCION, P_FECHA, P_ID_PELICULA, P_ID_SALA);
END;
/

-- PROCEDIMIENTO INSERTAR COMIDA
CREATE OR REPLACE PROCEDURE FIDE_COMIDA_TB_INSERTAR_COMIDA_SP (
  P_ID_COMIDA NUMBER,
  P_ID_INVENTARIO NUMBER,
  P_PRECIO NUMBER
) AS
BEGIN
  INSERT INTO FIDE_COMIDA_TB (ID_COMIDA, ID_INVENTARIO, PRECIO)
  VALUES (P_ID_COMIDA, P_ID_INVENTARIO, P_PRECIO);
END;
/

-- PROCEDIMIENTO INSERTAR FACTURA
CREATE OR REPLACE PROCEDURE FIDE_FACTURA_TB_INSERTAR_FACTURA_SP (
  P_ID_FACTURA NUMBER,
  P_FECHA_FACTURA DATE,
  P_ID_CLIENTE NUMBER,
  P_ID_FUNCION NUMBER,
  P_ID_EMPLEADO NUMBER,
  P_TOTAL NUMBER
) AS
BEGIN
  INSERT INTO FIDE_FACTURA_TB (ID_FACTURA, FECHA_FACTURA, ID_CLIENTE, ID_FUNCION, ID_EMPLEADO, TOTAL)
  VALUES (P_ID_FACTURA, P_FECHA_FACTURA, P_ID_CLIENTE, P_ID_FUNCION, P_ID_EMPLEADO, P_TOTAL);
END;
/

-- PROCEDIMIENTO INSERTAR FACTURA COMIDA
CREATE OR REPLACE PROCEDURE FIDE_FACTURA_COMIDA_TB_INSERTAR_FACTURA_COMIDA_SP (
  P_ID_FACTURA_COMIDA NUMBER,
  P_ID_COMIDA NUMBER,
  P_ID_CLIENTE NUMBER,
  P_ID_EMPLEADO NUMBER,
  P_CANTIDAD NUMBER,
  P_TOTAL NUMBER
) AS
BEGIN
  INSERT INTO FIDE_FACTURA_COMIDA_TB (ID_FACTURA_COMIDA, ID_COMIDA, ID_CLIENTE, ID_EMPLEADO, CANTIDAD, TOTAL)
  VALUES (P_ID_FACTURA_COMIDA, P_ID_COMIDA, P_ID_CLIENTE, P_ID_EMPLEADO, P_CANTIDAD, P_TOTAL);
END;
/

-- PROCEDIMIENTO INSERTAR POSICION
CREATE OR REPLACE PROCEDURE FIDE_POSICION_TB_INSERTAR_POSICION_SP (
  P_ID_POSICION NUMBER,
  P_NOMBRE VARCHAR2,
  P_DESCRIPCION VARCHAR2
) AS
BEGIN
  INSERT INTO FIDE_POSICION_TB (ID_POSICION, NOMBRE, DESCRIPCION)
  VALUES (P_ID_POSICION, P_NOMBRE, P_DESCRIPCION);
END;
/

-- PROCEDIMIENTO INSERTAR PAGOS
CREATE OR REPLACE PROCEDURE FIDE_PAGOS_TB_INSERTAR_PAGOS_SP (
  P_ID_PAGO NUMBER,
  P_ID_FACTURA NUMBER,
  P_ID_FACTURA_COMIDA NUMBER,
  P_FECHA_PAGO DATE,
  P_MONTO NUMBER,
  P_ID_METODO_PAGO NUMBER
) AS
BEGIN
  INSERT INTO FIDE_PAGOS_TB (ID_PAGO, ID_FACTURA, ID_FACTURA_COMIDA, FECHA_PAGO, MONTO, ID_METODO_PAGO)
  VALUES (P_ID_PAGO, P_ID_FACTURA, P_ID_FACTURA_COMIDA, P_FECHA_PAGO, P_MONTO, P_ID_METODO_PAGO);
END;
/

-- PROCEDIMIENTO INSERTAR METODO PAGO
CREATE OR REPLACE PROCEDURE FIDE_METODO_PAGO_TB_INSERTAR_METODO_PAGO (
  P_ID_METODO_PAGO NUMBER,
  P_NOMBRE VARCHAR2,
  P_DESCRIPCION VARCHAR2,
  P_ID_ESTADO NUMBER
) AS
BEGIN
  INSERT INTO FIDE_METODO_PAGO_TB (ID_METODO_PAGO, NOMBRE, DESCRIPCION, ID_ESTADO)
  VALUES (P_ID_METODO_PAGO, P_NOMBRE, P_DESCRIPCION, P_ID_ESTADO);
END;
/

-- PROCEDIMIENTO INSERTAR TIPO SALA
CREATE OR REPLACE PROCEDURE FIDE_TIPO_SALA_TB_INSERTAR_TIPO_SALA_SP (
  P_ID_TIPO_SALA NUMBER,
  P_NOMBRE VARCHAR2,
  P_DESCRIPCION VARCHAR2
) AS
BEGIN
  INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION)
  VALUES (P_ID_TIPO_SALA, P_NOMBRE, P_DESCRIPCION);
END;
/

-- PROCEDIMIENTO INSERTAR GENERO
CREATE OR REPLACE PROCEDURE FIDE_GENERO_TB_INSERTAR_GENERO_SP (
  P_ID_GENERO NUMBER,
  P_NOMBRE VARCHAR2,
  P_DESCRIPCION VARCHAR2
) AS
BEGIN
  INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION)
  VALUES (P_ID_GENERO, P_NOMBRE, P_DESCRIPCION);
END;
/

-- PROCEDIMIENTO INSERTAR DIRECTOR
CREATE OR REPLACE PROCEDURE FIDE_DIRECTOR_TB_INSERTAR_DIRECTOR_SP (
  P_ID_DIRECTOR NUMBER,
  P_NOMBRE VARCHAR2,
  P_NACIONALIDAD VARCHAR2
) AS
BEGIN
  INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD)
  VALUES (P_ID_DIRECTOR, P_NOMBRE, P_NACIONALIDAD);
END;


-- PROCEDIMIENTO INSERTAR IDIOMAS
CREATE OR REPLACE PROCEDURE FIDE_IDIOMAS_TB_INSERTAR_IDIOMAS_SP (
  P_ID_IDIOMAS NUMBER,
  P_NOMBRE VARCHAR2,
  P_DESCRIPCION VARCHAR2
) AS
BEGIN
  INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION)
  VALUES (P_ID_IDIOMAS, P_NOMBRE, P_DESCRIPCION);
END;
/

-- PROCEDIMIENTO INSERTAR ESTADO
CREATE OR REPLACE PROCEDURE FIDE_ESTADO_TB_INSERTAR_ESTADO_SP (
  P_ID_ESTADO NUMBER,
  P_NOMBRE VARCHAR2
) AS
BEGIN
  INSERT INTO FIDE_ESTADO_TB (ID_ESTADO, NOMBRE)
  VALUES (P_ID_ESTADO, P_NOMBRE);
END;
/

--Procedimiento Encriptar Pago
CREATE OR REPLACE procedure Encriptar_Pago_SP (
p_ID_PAGO number,
p_Pago number,
p_Clave varchar2
)as
L_key RAW(32);
L_data varchar2(100);
L_encrypted RAW(2000);
BEGIN
    IF LENGTH(P_CLAVE)!=32 THEN
        raise_application_error(-20001,'La clave de encriptacion debe tener 32 Caracteres');
      end if;
      
      L_data:=to_char(p_salario);
      L_key:=UTL_RAW.CAST_TO_RAW(p_clave);
      L_encrypted:=DBMS_CRYPTO.ENCRYPT(
                                       src=> UTL_RAW.CAST_TO_RAW(l_data),
                                       typ=> DBMS_CRYPTO.ENCRYPT_AES256+DBMS_CRYPTO.CHAIN_CBC+DBMS_CRYPTO.PAD_PKCS5,
                                       key=> l_key);
   insert into FIDE_PAGOS_TB(ID_PAGO,ID_FACTURA,ID_FACTURA_COMIDA,FECHA_PAGO, MONTO, ID_METODO_PAGO)
   Values(p_id_pago,L_encrypted); 
   COMMIT;
              
END;

/
select * from FIDE_PAGOS_TB
/
Begin
Encriptar_Pago_SP(1,'12345678901234567890123456789012');
End;
/


----Desencriptar
Create or replace procedure Descriptar_Datos_SP(
P_ID_PAGO number,
P_PAGO out number
)as
    v_key RAW(32):=UTL_RAW.CAST_TO_RAW('12345678901234567890123456789012');
    v_encrypted_data RAW(2000);
    v_descryted_data RAW(2000);
    v_descryted_string Varchar2(100);
begin
    select pago into v_encrypted_data
    from FIDE_PAGOS_TB
    where id=P_ID;
    
        v_descryted_data:= DBMS_CRYPTO.DECRYPT(
                                       src=> v_encrypted_data,
                                       typ=> DBMS_CRYPTO.ENCRYPT_AES256+DBMS_CRYPTO.CHAIN_CBC+DBMS_CRYPTO.PAD_PKCS5,
                                       key=> v_key);
        v_descryted_string:=UTL_RAW.CAST_TO_VARCHAR2(v_descryted_data);
        P_Pago:= TO_NUMBER(v_descryted_string);

end;
/

select * from FIDE_PAGOS_TB
/

--Para realizar consulta desencriptar
set serveroutput on;
declare
V_pago number;
begin
descriptar_datos_SP(1,V_pago );
DBMS_OUTPUT.put_line('El pago realizado es de: '|| V_pago);
end;



-------------------------------------------------------------------------------------------------------

------FUNCIONES-----

-- FUNCION DETALLES EMPLEADOS
CREATE OR REPLACE FUNCTION FIDE_EMPLEADOS_TB_DETALLES_EMPLEADO_FN (
  ID_EMPLEADO NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ' ' || APELLIDO || ', ' || CORREO_ELECTRONICO || ', ' || TELEFONO
  INTO detalle
  FROM FIDE_EMPLEADOS_TB
  WHERE ID_EMPLEADO = ID_EMPLEADO;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  el empleado';
END;
/

-- FUNCION DETALLES PROVEEDORES
CREATE OR REPLACE FUNCTION FIDE_PROVEEDORES_TB_DETALLES_PROVEEDOR_FN (
  ID_PROVEEDOR NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || CONTACTO || ', ' || TELEFONO
  INTO detalle
  FROM FIDE_PROVEEDORES_TB
  WHERE ID_PROVEEDOR = ID_PROVEEDOR;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  el proveedor';
END;
/

-- FUNCION DETALLES INVENTARIO
CREATE OR REPLACE FUNCTION FIDE_INVENTARIO_TB_DETALLES_INVENTARIO_FN (
  ID_INVENTARIO NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || DESCRIPCION || ', ' || CANTIDAD || ', ' || ID_PROVEEDOR
  INTO detalle
  FROM FIDE_INVENTARIO_TB
  WHERE ID_INVENTARIO = ID_INVENTARIO;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  el inventario';
END;
/

-- FUNCION DETALLES RESERVAS
CREATE OR REPLACE FUNCTION FIDE_RESERVAS_TB_DETALLES_RESERVA_FN (
  ID_RESERVA NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT ID_CLIENTE || ', ' || ID_FUNCION || ', ' || TO_CHAR(FECHA_RESERVA, 'YYYY-MM-DD') || ', ' || CANTIDAD_ASIENTOS
  INTO detalle
  FROM FIDE_RESERVAS_TB
  WHERE ID_RESERVA = ID_RESERVA;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  la reserva';
END;
/

-- FUNCION DETALLES PELICULAS
CREATE OR REPLACE FUNCTION FIDE_PELICULAS_TB_DETALLES_PELICULA_FN (
  ID_PELICULA NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || ID_GENERO || ', ' || ID_DIRECTOR || ', ' || DESCRIPCION || ', ' || ID_IDIOMAS || ', ' || ID_ESTADO
  INTO detalle
  FROM FIDE_PELICULAS_TB
  WHERE ID_PELICULA = ID_PELICULA;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  la pel cula';
END;
/

-- FUNCION DETALLES SALAS
CREATE OR REPLACE FUNCTION FIDE_SALAS_TB_DETALLES_SALA_FN (
  ID_SALA NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || NUMERO_ASIENTOS || ', ' || ID_TIPO_SALA || ', ' || ID_ESTADO
  INTO detalle
  FROM FIDE_SALAS_TB
  WHERE ID_SALA = ID_SALA;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  la sala';
END;
/

-- FUNCION DETALLES CLIENTES
CREATE OR REPLACE FUNCTION FIDE_CLIENTES_TB_DETALLES_CLIENTE_FN (
  ID_CLIENTE NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ' ' || APELLIDO || ', ' || CORREO_ELECTRONICO
  INTO detalle
  FROM FIDE_CLIENTES_TB
  WHERE ID_CLIENTE = ID_CLIENTE;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  el cliente';
END;
/

-- FUNCION DETALLE FUNCION
CREATE OR REPLACE FUNCTION FIDE_FUNCION_TB_DETALLES_FUNCION_FN (
  ID_FUNCION NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT TO_CHAR(FECHA, 'YYYY-MM-DD') || ', ' || ID_PELICULA || ', ' || ID_SALA
  INTO detalle
  FROM FIDE_FUNCION_TB
  WHERE ID_FUNCION = ID_FUNCION;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  la funci n';
END;
/

-- FUNCION DETALLES COMIDA
CREATE OR REPLACE FUNCTION FIDE_COMIDA_TB_DETALLES_COMIDA_FN (
  ID_COMIDA NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT ID_INVENTARIO || ', ' || TO_CHAR(PRECIO, '999G999D99')
  INTO detalle
  FROM FIDE_COMIDA_TB
  WHERE ID_COMIDA = ID_COMIDA;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  la comida';
END;
/

-- FUNCION DETALLES FACTURA
CREATE OR REPLACE FUNCTION FIDE_FACTURA_TB_DETALLES_FACTURA_FN (
  ID_FACTURA NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT TO_CHAR(FECHA_FACTURA, 'YYYY-MM-DD') || ', ' || ID_CLIENTE || ', ' || ID_FUNCION || ', ' || ID_EMPLEADO || ', ' || TO_CHAR(TOTAL, '999G999D99')
  INTO detalle
  FROM FIDE_FACTURA_TB
  WHERE ID_FACTURA = ID_FACTURA;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  la factura';
END;
/

-- FUNCION DETALLES FACTURA COMIDA
CREATE OR REPLACE FUNCTION FIDE_FACTURA_COMIDA_TB_DETALLES_FACTURA_COMIDA_FN (
  ID_FACTURA_COMIDA NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT ID_COMIDA || ', ' || ID_CLIENTE || ', ' || ID_EMPLEADO || ', ' || CANTIDAD || ', ' || TO_CHAR(TOTAL, '999G999D99')
  INTO detalle
  FROM FIDE_FACTURA_COMIDA_TB
  WHERE ID_FACTURA_COMIDA = ID_FACTURA_COMIDA;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  la factura';
END;
/

-- FUNCION DETALLES POSICION
CREATE OR REPLACE FUNCTION FIDE_POSICION_TB_DETALLES_POSICION_FN (
  ID_POSICION NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || DESCRIPCION
  INTO detalle
  FROM FIDE_POSICION_TB
  WHERE ID_POSICION = ID_POSICION;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  la posici n';
END;
/

-- FUNCION DETALLES PAGOS
CREATE OR REPLACE FUNCTION FIDE_PAGOS_TB_DETALLES_PAGO_FN (
  ID_PAGO NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT ID_FACTURA || ', ' || ID_FACTURA_COMIDA || ', ' || TO_CHAR(FECHA_PAGO, 'YYYY-MM-DD') || ', ' || TO_CHAR(MONTO, '999G999D99') || ', ' || ID_METODO_PAGO
  INTO detalle
  FROM FIDE_PAGOS_TB
  WHERE ID_PAGO = ID_PAGO;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  el pago';
END;
/

-- FUNCION DETALLES METODO PAGO
CREATE OR REPLACE FUNCTION FIDE_METODO_PAGO_TB_DETALLES_METODO_PAGO_FN (
  ID_METODO_PAGO NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || DESCRIPCION || ', ' || ID_ESTADO
  INTO detalle
  FROM FIDE_METODO_PAGO_TB
  WHERE ID_METODO_PAGO = ID_METODO_PAGO;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  el m todo de pago';
END;
/

-- FUNCION DETALLES TIPO SALA
CREATE OR REPLACE FUNCTION FIDE_TIPO_SALA_TB_DETALLES_TIPO_SALA_FN (
  ID_TIPO_SALA NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || DESCRIPCION
  INTO detalle
  FROM FIDE_TIPO_SALA_TB
  WHERE ID_TIPO_SALA = ID_TIPO_SALA;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  el tipo de sala';
END;
/

-- FUNCION DETALLES GENERO
CREATE OR REPLACE FUNCTION FIDE_GENERO_TB_DETALLES_GENERO_FN (
  ID_GENERO NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || DESCRIPCION
  INTO detalle
  FROM FIDE_GENERO_TB
  WHERE ID_GENERO = ID_GENERO;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No hay detalles';
END;
/

-- FUNCION DETALLES DIRECTOR
CREATE OR REPLACE FUNCTION FIDE_DIRECTOR_TB_DETALLES_DIRECTOR_FN (
  ID_DIRECTOR NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || NACIONALIDAD
  INTO detalle
  FROM FIDE_DIRECTOR_TB
  WHERE ID_DIRECTOR = ID_DIRECTOR;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  el director';
END;

/
-- FUNCION DETALLES IDIOMAS
CREATE OR REPLACE FUNCTION FIDE_IDIOMAS_TB_DETALLES_IDIOMAS_FN (
  ID_IDIOMAS NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE || ', ' || DESCRIPCION
  INTO detalle
  FROM FIDE_IDIOMAS_TB
  WHERE ID_IDIOMAS = ID_IDIOMAS;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'Idioma disponible';
END;
/

-- FUNCION DETALLES ESTADO
CREATE OR REPLACE FUNCTION FIDE_ESTADO_TB_DETALLES_ESTADO_FN (
  ID_ESTADO NUMBER
) RETURN VARCHAR2 AS
  detalle VARCHAR2(4000);
BEGIN
  SELECT NOMBRE
  INTO detalle
  FROM FIDE_ESTADO_TB
  WHERE ID_ESTADO = ID_ESTADO;
  RETURN detalle;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    RETURN 'No se encontr  el estado';
END;
/

-------------------------------------------------------------------------------------------------------
------SECUENCIAS-----
-- Secuencia Empleados
CREATE SEQUENCE ID_EMPLEADOS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia Proveedores
CREATE SEQUENCE ID_PROVEEDORES_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia Inventario
CREATE SEQUENCE ID_INVENTARIO_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia Reservas
CREATE SEQUENCE ID_RESERVAS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia Peliculas
CREATE SEQUENCE ID_PELICULAS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_SALAS_TB
CREATE SEQUENCE ID_SALAS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_CLIENTES_TB
CREATE SEQUENCE ID_CLIENTES_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_FUNCION_TB
CREATE SEQUENCE ID_FUNCION_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_COMIDA_TB
CREATE SEQUENCE ID_COMIDA_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_FACTURA_TB
CREATE SEQUENCE ID_FACTURA_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_FACTURA_COMIDA_TB
CREATE SEQUENCE ID_FACTURA_COMIDA_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_POSICION_TB
CREATE SEQUENCE ID_POSICION_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_PAGOS_TB
CREATE SEQUENCE ID_PAGOS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_METODO_PAGO_TB
CREATE SEQUENCE ID_METODO_PAGO_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_TIPO_SALA_TB
CREATE SEQUENCE ID_TIPO_SALA_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_GENERO_TB
CREATE SEQUENCE ID_GENERO_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_DIRECTOR_TB
CREATE SEQUENCE ID_DIRECTOR_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_IDIOMAS_TB
CREATE SEQUENCE ID_IDIOMAS_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/
-- Secuencia para FIDE_ESTADO_TB
CREATE SEQUENCE ID_ESTADO_SEQ
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;
/

-------------------------------------------------------------------------------------------------------
------VISTAS-----

-- Vista Detalles Empleados
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_EMPLEADOS_V AS
SELECT 
    ID_EMPLEADO, 
    NOMBRE, 
    APELLIDO, 
    CORREO_ELECTRONICO, 
    TELEFONO, 
    ID_POSICION
FROM 
    FIDE_EMPLEADOS_TB;
    
/

-- Vista Detalles Proveedores
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_PROVEEDORES_V AS
SELECT 
    ID_PROVEEDOR, 
    NOMBRE, 
    CONTACTO, 
    TELEFONO
FROM 
    FIDE_PROVEEDORES_TB;
/
-- Vista Detalles Inventario
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_INVENTARIO_V AS
SELECT 
    ID_INVENTARIO, 
    NOMBRE, 
    DESCRIPCION, 
    CANTIDAD, 
    ID_PROVEEDOR
FROM 
    FIDE_INVENTARIO_TB;
/
-- Vista Detalles Reservas
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_RESERVAS_V AS
SELECT 
    ID_RESERVA, 
    ID_CLIENTE, 
    ID_FUNCION, 
    FECHA_RESERVA, 
    CANTIDAD_ASIENTOS
FROM 
    FIDE_RESERVAS_TB;
/
-- Vista Detalles Pel culas
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_PELICULAS_V AS
SELECT 
    ID_PELICULA, 
    NOMBRE, 
    ID_GENERO, 
    ID_DIRECTOR, 
    DESCRIPCION, 
    ID_IDIOMAS, 
    ID_ESTADO
FROM 
    FIDE_PELICULAS_TB;
/
-- Vista Detalles Salas
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_SALAS_V AS
SELECT 
    ID_SALA, 
    NOMBRE, 
    NUMERO_ASIENTOS, 
    ID_TIPO_SALA, 
    ID_ESTADO
FROM 
    FIDE_SALAS_TB;
/
-- Vista Detalles Clientes
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_CLIENTES_V AS
SELECT 
    ID_CLIENTE, 
    NOMBRE, 
    APELLIDO, 
    CORREO_ELECTRONICO
FROM 
    FIDE_CLIENTES_TB;
/
-- Vista Detalles Funciones
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_FUNCION_V AS
SELECT 
    ID_FUNCION, 
    FECHA, 
    ID_PELICULA, 
    ID_SALA
FROM 
    FIDE_FUNCION_TB;
/
-- Vista Detalles Comida
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_COMIDA_V AS
SELECT 
    ID_COMIDA, 
    ID_INVENTARIO, 
    PRECIO
FROM 
    FIDE_COMIDA_TB;
/
-- Vista Detalles Factura
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_FACTURA_V AS
SELECT 
    ID_FACTURA, 
    FECHA_FACTURA, 
    ID_CLIENTE, 
    ID_FUNCION, 
    ID_EMPLEADO, 
    TOTAL
FROM 
    FIDE_FACTURA_TB;
/
-- Vista Detalles Factura Comida
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_FACTURA_COMIDA_V AS
SELECT 
    ID_FACTURA_COMIDA, 
    ID_COMIDA, 
    ID_CLIENTE, 
    ID_EMPLEADO, 
    CANTIDAD, 
    TOTAL
FROM 
    FIDE_FACTURA_COMIDA_TB;
/
-- Vista Detalles Posici n
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_POSICION_V AS
SELECT 
    ID_POSICION, 
    NOMBRE, 
    DESCRIPCION
FROM 
    FIDE_POSICION_TB;
/
-- Vista Detalles Pagos
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_PAGOS_V AS
SELECT 
    ID_PAGO, 
    ID_FACTURA, 
    ID_FACTURA_COMIDA, 
    FECHA_PAGO, 
    MONTO, 
    ID_METODO_PAGO
FROM 
    FIDE_PAGOS_TB;
/
-- Vista Detalles M todo Pago
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_METODO_PAGO_V AS
SELECT 
    ID_METODO_PAGO, 
    NOMBRE, 
    DESCRIPCION, 
    ID_ESTADO
FROM 
    FIDE_METODO_PAGO_TB;
/
-- Vista Detalles Tipo Sala
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_TIPO_SALA_V AS
SELECT 
    ID_TIPO_SALA, 
    NOMBRE, 
    DESCRIPCION
FROM 
    FIDE_TIPO_SALA_TB;
/
-- Vista Detalles G nero
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_GENERO_V AS
SELECT 
    ID_GENERO, 
    NOMBRE, 
    DESCRIPCION
FROM 
    FIDE_GENERO_TB;
/
-- Vista Detalles Director
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_DIRECTOR_V AS
SELECT 
    ID_DIRECTOR, 
    NOMBRE, 
    NACIONALIDAD
FROM 
    FIDE_DIRECTOR_TB;
/
-- Vista Detalles Idiomas
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_IDIOMAS_V AS
SELECT 
    ID_IDIOMAS, 
    NOMBRE, 
    DESCRIPCION
FROM 
    FIDE_IDIOMAS_TB;
/
-- Vista Detalles Estado
CREATE OR REPLACE VIEW FIDE_VISTA_DETALLES_ESTADO_V AS
SELECT 
    ID_ESTADO, 
    NOMBRE
FROM 
    FIDE_ESTADO_TB;
/

-------------------------------------------------------------------------------------------------------

------VISTAS MATERIALIZADAS-----

-- Vista Materializada Detalle Empleados y Posiciones
CREATE MATERIALIZED VIEW FIDE_DETALLES_EMPLEADOS_POSICIONES_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    E.ID_EMPLEADO,
    E.NOMBRE AS NOMBRE_EMPLEADO,
    E.APELLIDO,
    E.CORREO_ELECTRONICO,
    E.TELEFONO,
    P.NOMBRE AS NOMBRE_POSICION
FROM 
    FIDE_EMPLEADOS_TB E
LEFT JOIN 
    FIDE_POSICION_TB P ON E.ID_POSICION = P.ID_POSICION;
/

-- Vista Materializada Detalle Inventario y Proveedores
CREATE MATERIALIZED VIEW FIDE_DETALLES_INVENTARIO_PROVEEDORES_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    I.ID_INVENTARIO,
    I.NOMBRE AS NOMBRE_INVENTARIO,
    I.DESCRIPCION,
    I.CANTIDAD,
    P.NOMBRE AS NOMBRE_PROVEEDOR
FROM 
    FIDE_INVENTARIO_TB I
JOIN 
    FIDE_PROVEEDORES_TB P ON I.ID_PROVEEDOR = P.ID_PROVEEDOR;
/

-- Vista Materializada Detalle Reservas y Clientes
CREATE MATERIALIZED VIEW FIDE_DETALLES_RESERVAS_CLIENTES_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    R.ID_RESERVA,
    R.FECHA_RESERVA,
    R.CANTIDAD_ASIENTOS,
    C.NOMBRE AS NOMBRE_CLIENTE,
    C.APELLIDO
FROM 
    FIDE_RESERVAS_TB R
JOIN 
    FIDE_CLIENTES_TB C ON R.ID_CLIENTE = C.ID_CLIENTE;
/

-- Vista Materializada Detalle Facturas y Clientes
CREATE MATERIALIZED VIEW FIDE_DETALLES_FACTURAS_CLIENTES_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    F.ID_FACTURA,
    F.FECHA_FACTURA,
    F.TOTAL,
    C.NOMBRE AS NOMBRE_CLIENTE,
    C.APELLIDO
FROM 
    FIDE_FACTURA_TB F
JOIN 
    FIDE_CLIENTES_TB C ON F.ID_CLIENTE = C.ID_CLIENTE;
/

-- Vista Materializada Detalle de Factura Comida y Clientes
CREATE MATERIALIZED VIEW FIDE_DETALLES_FACTURA_COMIDA_CLIENTES_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    FC.ID_FACTURA_COMIDA,
    FC.CANTIDAD,
    FC.TOTAL,
    C.NOMBRE AS NOMBRE_CLIENTE,
    C.APELLIDO
FROM 
    FIDE_FACTURA_COMIDA_TB FC
JOIN 
    FIDE_CLIENTES_TB C ON FC.ID_CLIENTE = C.ID_CLIENTE;
/

-- Vista Materializada Detalle Pagos y M todos de Pago
CREATE MATERIALIZED VIEW FIDE_DETALLES_PAGOS_METODOS_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    P.ID_PAGO,
    P.FECHA_PAGO,
    P.MONTO,
    MP.NOMBRE AS NOMBRE_METODO_PAGO
FROM 
    FIDE_PAGOS_TB P
JOIN 
    FIDE_METODO_PAGO_TB MP ON P.ID_METODO_PAGO = MP.ID_METODO_PAGO;
/

-- Vista Materializada Detalle Funciones y Pel culas
CREATE MATERIALIZED VIEW FIDE_DETALLES_FUNCIONES_PELICULAS_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    F.ID_FUNCION,
    F.FECHA,
    P.NOMBRE AS NOMBRE_PELICULA,
    D.NOMBRE AS NOMBRE_DIRECTOR
FROM 
    FIDE_FUNCION_TB F
JOIN 
    FIDE_PELICULAS_TB P ON F.ID_PELICULA = P.ID_PELICULA
JOIN 
    FIDE_DIRECTOR_TB D ON P.ID_DIRECTOR = D.ID_DIRECTOR;
/

-- Vista Materializada Detalle Comida e Inventario
CREATE MATERIALIZED VIEW FIDE_DETALLES_COMIDA_INVENTARIO_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    C.ID_COMIDA,
    C.PRECIO,
    I.NOMBRE AS NOMBRE_INVENTARIO,
    I.DESCRIPCION
FROM 
    FIDE_COMIDA_TB C
JOIN 
    FIDE_INVENTARIO_TB I ON C.ID_INVENTARIO = I.ID_INVENTARIO;
/

-- Vista Materializada Detalle Pel culas y G neros
CREATE MATERIALIZED VIEW FIDE_DETALLES_PELICULAS_GENEROS_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    P.ID_PELICULA,
    P.NOMBRE AS NOMBRE_PELICULA,
    G.NOMBRE AS NOMBRE_GENERO
FROM 
    FIDE_PELICULAS_TB P
JOIN 
    FIDE_GENERO_TB G ON P.ID_GENERO = G.ID_GENERO;
/

-- Vista Materializada Detalle Pel culas y Estados
CREATE MATERIALIZED VIEW FIDE_DETALLES_PELICULAS_ESTADOS_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    P.ID_PELICULA,
    P.NOMBRE AS NOMBRE_PELICULA,
    E.NOMBRE AS NOMBRE_ESTADO
FROM 
    FIDE_PELICULAS_TB P
JOIN 
    FIDE_ESTADO_TB E ON P.ID_ESTADO = E.ID_ESTADO;
/

-- Vista Materializada Detalle Pel culas e Idiomas
CREATE MATERIALIZED VIEW FIDE_DETALLES_PELICULAS_IDIOMAS_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    P.ID_PELICULA,
    P.NOMBRE AS NOMBRE_PELICULA,
    I.NOMBRE AS NOMBRE_IDIOMA
FROM 
    FIDE_PELICULAS_TB P
JOIN 
    FIDE_IDIOMAS_TB I ON P.ID_IDIOMAS = I.ID_IDIOMAS;
/

-- Vista Materializada Detalle Salas y Tipos de Sala
CREATE MATERIALIZED VIEW FIDE_DETALLES_SALAS_TIPOS_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    S.ID_SALA,
    S.NOMBRE AS NOMBRE_SALA,
    T.NOMBRE AS NOMBRE_TIPO_SALA
FROM 
    FIDE_SALAS_TB S
JOIN 
    FIDE_TIPO_SALA_TB T ON S.ID_TIPO_SALA = T.ID_TIPO_SALA;

-- Vista Materializada Detalle Facturas y Empleados
CREATE MATERIALIZED VIEW FIDE_DETALLES_FACTURAS_EMPLEADOS_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    F.ID_FACTURA,
    F.FECHA_FACTURA,
    F.TOTAL,
    E.NOMBRE AS NOMBRE_EMPLEADO,
    E.APELLIDO
FROM 
    FIDE_FACTURA_TB F
JOIN 
    FIDE_EMPLEADOS_TB E ON F.ID_EMPLEADO = E.ID_EMPLEADO;
/

-- Vista Materializada Detalle Factura Comida y Empleados
CREATE MATERIALIZED VIEW FIDE_DETALLES_FACTURA_COMIDA_EMPLEADOS_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    FC.ID_FACTURA_COMIDA,
    FC.CANTIDAD,
    FC.TOTAL,
    E.NOMBRE AS NOMBRE_EMPLEADO,
    E.APELLIDO
FROM 
    FIDE_FACTURA_COMIDA_TB FC
JOIN 
    FIDE_EMPLEADOS_TB E ON FC.ID_EMPLEADO = E.ID_EMPLEADO;
/

-- Vista Materializada Detalle Funciones y Salas
CREATE MATERIALIZED VIEW FIDE_DETALLES_FUNCIONES_SALAS_VM
BUILD IMMEDIATE
REFRESH COMPLETE
AS
SELECT 
    F.ID_FUNCION,
    F.FECHA,
    S.NOMBRE AS NOMBRE_SALA,
    T.NOMBRE AS NOMBRE_TIPO_SALA
FROM 
    FIDE_FUNCION_TB F
JOIN 
    FIDE_SALAS_TB S ON F.ID_SALA = S.ID_SALA
JOIN 
    FIDE_TIPO_SALA_TB T ON S.ID_TIPO_SALA = T.ID_TIPO_SALA;
/

-------------------------------------------------------------------------------------------------------
CREATE TABLE AUDIT_LOG (
    id          NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    table_name  VARCHAR2(100),
    operation   VARCHAR2(50),
    timestamp   DATE
);
/

------TRIGGERS-----

-- TRIGGER PARA REVISAR EMPLEADOS
CREATE OR REPLACE TRIGGER FIDE_REVISAR_EMPLEADOS_INSERTADOS_TRG
AFTER INSERT ON FIDE_EMPLEADOS_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_EMPLEADOS_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR PROVEEDORES
CREATE OR REPLACE TRIGGER FIDE_REVISAR_PROVEEDORES_INSERTADOS_TRG
AFTER INSERT ON FIDE_PROVEEDORES_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_PROVEEDORES_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR INVENTARIO
CREATE OR REPLACE TRIGGER FIDE_REVISAR_INVENTARIO_INSERTADO_TRG
AFTER INSERT ON FIDE_INVENTARIO_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_INVENTARIO_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR RESERVAS
CREATE OR REPLACE TRIGGER FIDE_REVISAR_RESERVAS_INSERTADAS_TRG
AFTER INSERT ON FIDE_RESERVAS_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_RESERVAS_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR PELICULAS
CREATE OR REPLACE TRIGGER FIDE_REVISAR_PELICULAS_INSERTADAS_TRG
AFTER INSERT ON FIDE_PELICULAS_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_PELICULAS_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR SALAS
CREATE OR REPLACE TRIGGER FIDE_REVISAR_SALAS_INSERTADAS_TRG
AFTER INSERT ON FIDE_SALAS_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_SALAS_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR CLIENTES
CREATE OR REPLACE TRIGGER FIDE_REVISAR_CLIENTES_INSERTADOS_TRG
AFTER INSERT ON FIDE_CLIENTES_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_CLIENTES_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA FIDE_FUNCION_TB
CREATE OR REPLACE TRIGGER FIDE_REVISAR_FUNCION_INSERTADAS_TRG
AFTER INSERT ON FIDE_FUNCION_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_FUNCION_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR COMIDA
CREATE OR REPLACE TRIGGER FIDE_REVISAR_COMIDA_INSERTADA_TRG
AFTER INSERT ON FIDE_COMIDA_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_COMIDA_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR FACTURA
CREATE OR REPLACE TRIGGER FIDE_REVISAR_FACTURA_INSERTADA_TRG
AFTER INSERT ON FIDE_FACTURA_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_FACTURA_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR FACTURA COMIDA
CREATE OR REPLACE TRIGGER FIDE_REVISAR_FACTURA_COMIDA_INSERTADA_TRG
AFTER INSERT ON FIDE_FACTURA_COMIDA_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_FACTURA_COMIDA_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR POSICION
CREATE OR REPLACE TRIGGER FIDE_REVISAR_POSICION_INSERTADA_TRG
AFTER INSERT ON FIDE_POSICION_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_POSICION_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR PAGOS
CREATE OR REPLACE TRIGGER FIDE_REVISAR_PAGOS_INSERTADOS_TRG
AFTER INSERT ON FIDE_PAGOS_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_PAGOS_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR METODO PAGO
CREATE OR REPLACE TRIGGER FIDE_REVISAR_METODO_PAGO_INSERTADO_TRG
AFTER INSERT ON FIDE_METODO_PAGO_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_METODO_PAGO_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR TIPO SALA
CREATE OR REPLACE TRIGGER FIDE_REVISAR_TIPO_SALA_INSERTADO_TRG
AFTER INSERT ON FIDE_TIPO_SALA_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_TIPO_SALA_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR GENERO
CREATE OR REPLACE TRIGGER FIDE_REVISAR_GENERO_INSERTADO_TRG
AFTER INSERT ON FIDE_GENERO_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_GENERO_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR DIRECTOR
CREATE OR REPLACE TRIGGER FIDE_REVISAR_DIRECTOR_INSERTADO_TRG
AFTER INSERT ON FIDE_DIRECTOR_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_DIRECTOR_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR IDIOMAS
CREATE OR REPLACE TRIGGER FIDE_REVISAR_IDIOMAS_INSERTADO_TRG
AFTER INSERT ON FIDE_IDIOMAS_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_IDIOMAS_TB', 'INSERT', SYSDATE);
END;
/

-- TRIGGER PARA REVISAR ESTADO
CREATE OR REPLACE TRIGGER FIDE_REVISAR_ESTADO_INSERTADO_TRG
AFTER INSERT ON FIDE_ESTADO_TB
FOR EACH ROW
BEGIN
  INSERT INTO AUDIT_LOG (table_name, operation, timestamp)
  VALUES ('FIDE_ESTADO_TB', 'INSERT', SYSDATE);
END;
/

-------------------------------------------------------------------------------------------------------

------PAQUETES-----
CREATE OR REPLACE PACKAGE FIDE_MOVIE_CLUB_PKG_ESTADOS_Y_GENEROS AS
    -- Constantes
    ESTADO_ACTIVO CONSTANT VARCHAR2(10) := 'ACTIVO';
    ESTADO_INACTIVO CONSTANT VARCHAR2(10) := 'INACTIVO';

    -- Cursores
    CURSOR CUR_ESTADO IS
        SELECT ID_ESTADO, NOMBRE FROM FIDE_ESTADO_TB;

    CURSOR CUR_GENERO IS
        SELECT ID_GENERO, NOMBRE, DESCRIPCION FROM FIDE_GENERO_TB;

    -- Funciones
    FUNCTION OBTENER_ESTADO(P_ID_ESTADO NUMBER) RETURN VARCHAR2;
    FUNCTION OBTENER_GENERO(P_ID_GENERO NUMBER) RETURN VARCHAR2;

    -- Procedimientos
    PROCEDURE INSERTAR_ESTADO(P_ID_ESTADO NUMBER, P_NOMBRE VARCHAR2);
    PROCEDURE INSERTAR_GENERO(P_ID_GENERO NUMBER, P_NOMBRE VARCHAR2, P_DESCRIPCION VARCHAR2);
END FIDE_MOVIE_CLUB_PKG_ESTADOS_Y_GENEROS;
/
CREATE OR REPLACE PACKAGE BODY FIDE_MOVIE_CLUB_PKG_ESTADOS_Y_GENEROS AS
    --Obtenemos en que estado esta
    FUNCTION OBTENER_ESTADO(P_ID_ESTADO NUMBER) RETURN VARCHAR2 IS
        V_NOMBRE VARCHAR2(50);
    BEGIN
        SELECT NOMBRE INTO V_NOMBRE FROM FIDE_ESTADO_TB WHERE ID_ESTADO = P_ID_ESTADO;
        RETURN V_NOMBRE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'NO EXISTE';
    END OBTENER_ESTADO;

    -- Función para obtener el nombre del género
    FUNCTION OBTENER_GENERO(P_ID_GENERO NUMBER) RETURN VARCHAR2 IS
        V_NOMBRE VARCHAR2(50);
    BEGIN
        SELECT NOMBRE INTO V_NOMBRE FROM FIDE_GENERO_TB WHERE ID_GENERO = P_ID_GENERO;
        RETURN V_NOMBRE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'NO EXISTE';
    END OBTENER_GENERO;

    -- Procedimiento para insertar un estado
    PROCEDURE INSERTAR_ESTADO(P_ID_ESTADO NUMBER, P_NOMBRE VARCHAR2) IS
    BEGIN
        INSERT INTO FIDE_ESTADO_TB (ID_ESTADO, NOMBRE) VALUES (P_ID_ESTADO, P_NOMBRE);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END INSERTAR_ESTADO;

    -- Procedimiento para insertar un género
    PROCEDURE INSERTAR_GENERO(P_ID_GENERO NUMBER, P_NOMBRE VARCHAR2, P_DESCRIPCION VARCHAR2) IS
    BEGIN
        INSERT INTO FIDE_GENERO_TB (ID_GENERO, NOMBRE, DESCRIPCION) VALUES (P_ID_GENERO, P_NOMBRE, P_DESCRIPCION);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END INSERTAR_GENERO;
END FIDE_MOVIE_CLUB_PKG_ESTADOS_Y_GENEROS;
/



CREATE OR REPLACE PACKAGE FIDE_MOVIE_CLUB_PKG_DIRECTORES_IDIOMAS_TIPOSALAS AS
    -- Cursores
    CURSOR CUR_DIRECTOR IS
        SELECT ID_DIRECTOR, NOMBRE, NACIONALIDAD FROM FIDE_DIRECTOR_TB;

    CURSOR CUR_IDIOMAS IS
        SELECT ID_IDIOMAS, NOMBRE, DESCRIPCION FROM FIDE_IDIOMAS_TB;

    CURSOR CUR_TIPO_SALA IS
        SELECT ID_TIPO_SALA, NOMBRE, DESCRIPCION FROM FIDE_TIPO_SALA_TB;

    -- Funciones
    FUNCTION OBTENER_DIRECTOR(P_ID_DIRECTOR NUMBER) RETURN VARCHAR2;
    FUNCTION OBTENER_IDIOMAS(P_ID_IDIOMAS NUMBER) RETURN VARCHAR2;
    FUNCTION OBTENER_TIPO_SALA(P_ID_TIPO_SALA NUMBER) RETURN VARCHAR2;

    -- Procedimientos
    PROCEDURE INSERTAR_DIRECTOR(P_ID_DIRECTOR NUMBER, P_NOMBRE VARCHAR2, P_NACIONALIDAD VARCHAR2);
    PROCEDURE INSERTAR_IDIOMAS(P_ID_IDIOMAS NUMBER, P_NOMBRE VARCHAR2, P_DESCRIPCION VARCHAR2);
    PROCEDURE INSERTAR_TIPO_SALA(P_ID_TIPO_SALA NUMBER, P_NOMBRE VARCHAR2, P_DESCRIPCION VARCHAR2);
END FIDE_MOVIE_CLUB_PKG_DIRECTORES_IDIOMAS_TIPOSALAS;
/
CREATE OR REPLACE PACKAGE BODY FIDE_MOVIE_CLUB_PKG_DIRECTORES_IDIOMAS_TIPOSALAS AS
    -- aqui obtenemos el nombre del director
    FUNCTION OBTENER_DIRECTOR(P_ID_DIRECTOR NUMBER) RETURN VARCHAR2 IS
        V_NOMBRE VARCHAR2(50);
    BEGIN
        SELECT NOMBRE INTO V_NOMBRE FROM FIDE_DIRECTOR_TB WHERE ID_DIRECTOR = P_ID_DIRECTOR;
        RETURN V_NOMBRE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'NO EXISTE';
    END OBTENER_DIRECTOR;


    FUNCTION OBTENER_IDIOMAS(P_ID_IDIOMAS NUMBER) RETURN VARCHAR2 IS
        V_NOMBRE VARCHAR2(50);
    BEGIN
        SELECT NOMBRE INTO V_NOMBRE FROM FIDE_IDIOMAS_TB WHERE ID_IDIOMAS = P_ID_IDIOMAS;
        RETURN V_NOMBRE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'NO EXISTE';
    END OBTENER_IDIOMAS;


    FUNCTION OBTENER_TIPO_SALA(P_ID_TIPO_SALA NUMBER) RETURN VARCHAR2 IS
        V_NOMBRE VARCHAR2(50);
    BEGIN
        SELECT NOMBRE INTO V_NOMBRE FROM FIDE_TIPO_SALA_TB WHERE ID_TIPO_SALA = P_ID_TIPO_SALA;
        RETURN V_NOMBRE;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RETURN 'NO EXISTE';
    END OBTENER_TIPO_SALA;

    --  insertar un director
    PROCEDURE INSERTAR_DIRECTOR(P_ID_DIRECTOR NUMBER, P_NOMBRE VARCHAR2, P_NACIONALIDAD VARCHAR2) IS
    BEGIN
        INSERT INTO FIDE_DIRECTOR_TB (ID_DIRECTOR, NOMBRE, NACIONALIDAD) VALUES (P_ID_DIRECTOR, P_NOMBRE, P_NACIONALIDAD);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END INSERTAR_DIRECTOR;

    --   insertar un idioma
    PROCEDURE INSERTAR_IDIOMAS(P_ID_IDIOMAS NUMBER, P_NOMBRE VARCHAR2, P_DESCRIPCION VARCHAR2) IS
    BEGIN
        INSERT INTO FIDE_IDIOMAS_TB (ID_IDIOMAS, NOMBRE, DESCRIPCION) VALUES (P_ID_IDIOMAS, P_NOMBRE, P_DESCRIPCION);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END INSERTAR_IDIOMAS;

    --   insertar un tipo de sala
    PROCEDURE INSERTAR_TIPO_SALA(P_ID_TIPO_SALA NUMBER, P_NOMBRE VARCHAR2, P_DESCRIPCION VARCHAR2) IS
    BEGIN
        INSERT INTO FIDE_TIPO_SALA_TB (ID_TIPO_SALA, NOMBRE, DESCRIPCION) VALUES (P_ID_TIPO_SALA, P_NOMBRE, P_DESCRIPCION);
    EXCEPTION
        WHEN OTHERS THEN
            DBMS_OUTPUT.PUT_LINE(SQLERRM);
    END INSERTAR_TIPO_SALA;
END FIDE_MOVIE_CLUB_PKG_DIRECTORES_IDIOMAS_TIPOSALAS;
/



-------------------------------------------------------------------------------------------------------

------TABLESPACE-----

--hacemos el tablespace dafault para toda la bd

CREATE TABLESPACE FIDE_MovieClub_TBS DATAFILE 'fide_movieclub_tbs.dbf' SIZE 50M;
/

ALTER USER Movie_Club DEFAULT TABLESPACE FIDE_MovieClub_TBS;
/

-------------------------------------------------------------------------------------------------------

------PROFILE-----

--Perfil administrador
CREATE PROFILE FIDE_MOVIE_CLUB_ADMINISTRADOR_PROF LIMIT
    SESSIONS_PER_USER 1 
    FAILED_LOGIN_ATTEMPTS 3 
    PASSWORD_LOCK_TIME 90; 
/

-- Creamos el rol de administrador
CREATE ROLE ROL_ADMINISTRADOR;


-- Crear un usuario administrador y asignarle un perfil y rol
CREATE USER ADMINISTRATOR IDENTIFIED BY admin12345 PROFILE FIDE_MOVIE_CLUB_ADMINISTRADOR_PROF;
/

--Asignamos privilegios al rol de administrador
GRANT CREATE SESSION, CREATE TABLE, CREATE VIEW, CREATE PROCEDURE TO ADMINISTRATOR;
/


--Perfil empleado
CREATE PROFILE FIDE_MOVIE_CLUB_EMPLEADO_PROF LIMIT
    SESSIONS_PER_USER 1 --Permite 1 sesion por usuario
    FAILED_LOGIN_ATTEMPTS 3 --Permite 3 errores
    PASSWORD_LOCK_TIME 90; --A los 90 dias expira
/

-- Crear el rol de empleado
CREATE ROLE ROL_EMPLEADO;
/

-- Crear un usuario empleado y asignarle un perfil y el  rol
CREATE USER EMPLEADO_CINE IDENTIFIED BY empleado123456 PROFILE FIDE_MOVIE_CLUB_EMPLEADO_PROF;
GRANT ROL_EMPLEADO TO EMPLEADO_CINE;
/

-- Asignar privilegios al rol de empleado
GRANT CREATE SESSION TO ROL_EMPLEADO;
/
-------------------------------------------------------------------------------------------------------

--------SECUENCIAS---------
-- FIDE_COMIDA_SEQ
CREATE SEQUENCE FIDE_COMIDA_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 

-- FIDE_INVENTARIO_SEQ
CREATE SEQUENCE FIDE_INVENTARIO_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 

-- FIDE_EMPLEADOS_SEQ
CREATE SEQUENCE FIDE_EMPLEADOS_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 

-- FIDE_POSICION_SEQ
CREATE SEQUENCE FIDE_POSICION_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 

-- FIDE_PROVEEDOR_SEQ
CREATE SEQUENCE FIDE_PROVEEDOR_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 

-- FIDE_TIPO_SALA_SEQ
CREATE SEQUENCE FIDE_TIPO_SALA_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 

-- FIDE_METODO_PAGO_SEQ
CREATE SEQUENCE FIDE_METODO_PAGO_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 

-- FIDE_PELICULAS_SEQ
CREATE SEQUENCE FIDE_PELICULAS_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 

-- FIDE_GENERO_SEQ
CREATE SEQUENCE FIDE_GENERO_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 

-- FIDE_DIRECTOR_SEQ
CREATE SEQUENCE FIDE_DIRECTOR_SEQ
START WITH 15
INCREMENT BY 1
NOCACHE
NOCYCLE;
/ 
